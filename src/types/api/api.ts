/* tslint:disable */
/* eslint-disable */
/**
 * Vacation planner
 * Plan your next trip with us
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CreateExpenseDto
 */
export interface CreateExpenseDto {
    /**
     * 
     * @type {number}
     * @memberof CreateExpenseDto
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof CreateExpenseDto
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof CreateExpenseDto
     */
    'category': CreateExpenseDtoCategoryEnum;
}

export const CreateExpenseDtoCategoryEnum = {
    Food: 'food',
    Transportation: 'transportation',
    Accomodation: 'accomodation',
    Misc: 'misc'
} as const;

export type CreateExpenseDtoCategoryEnum = typeof CreateExpenseDtoCategoryEnum[keyof typeof CreateExpenseDtoCategoryEnum];

/**
 * 
 * @export
 * @interface CreateTripDto
 */
export interface CreateTripDto {
    /**
     * 
     * @type {string}
     * @memberof CreateTripDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTripDto
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof CreateTripDto
     */
    'endDate': string;
    /**
     * 
     * @type {Array<number>}
     * @memberof CreateTripDto
     */
    'destinations'?: Array<number>;
    /**
     * 
     * @type {Array<CreateExpenseDto>}
     * @memberof CreateTripDto
     */
    'expenses'?: Array<CreateExpenseDto>;
}
/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Destination
 */
export interface Destination {
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    'country': string;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    'media': string;
    /**
     * 
     * @type {Array<Trip>}
     * @memberof Destination
     */
    'trips': Array<Trip>;
    /**
     * 
     * @type {number}
     * @memberof Destination
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Destination
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface Expense
 */
export interface Expense {
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    'amount': number;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    'category': ExpenseCategoryEnum;
    /**
     * 
     * @type {Trip}
     * @memberof Expense
     */
    'trip': Trip;
    /**
     * 
     * @type {number}
     * @memberof Expense
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Expense
     */
    'deletedAt': string;
}

export const ExpenseCategoryEnum = {
    Food: 'food',
    Transportation: 'transportation',
    Accomodation: 'accomodation',
    Misc: 'misc'
} as const;

export type ExpenseCategoryEnum = typeof ExpenseCategoryEnum[keyof typeof ExpenseCategoryEnum];

/**
 * 
 * @export
 * @interface SignInDto
 */
export interface SignInDto {
    /**
     * 
     * @type {string}
     * @memberof SignInDto
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof SignInDto
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface Trip
 */
export interface Trip {
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'title': string;
    /**
     * 
     * @type {User}
     * @memberof Trip
     */
    'user': User;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'startDate': string;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'endDate': string;
    /**
     * 
     * @type {Array<Destination>}
     * @memberof Trip
     */
    'destinations': Array<Destination>;
    /**
     * 
     * @type {Array<Expense>}
     * @memberof Trip
     */
    'expenses': Array<Expense>;
    /**
     * 
     * @type {number}
     * @memberof Trip
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'deletedAt': string;
}
/**
 * 
 * @export
 * @interface UpdateExpenseDto
 */
export interface UpdateExpenseDto {
    /**
     * 
     * @type {number}
     * @memberof UpdateExpenseDto
     */
    'amount'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateExpenseDto
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateExpenseDto
     */
    'category'?: UpdateExpenseDtoCategoryEnum;
}

export const UpdateExpenseDtoCategoryEnum = {
    Food: 'food',
    Transportation: 'transportation',
    Accomodation: 'accomodation',
    Misc: 'misc'
} as const;

export type UpdateExpenseDtoCategoryEnum = typeof UpdateExpenseDtoCategoryEnum[keyof typeof UpdateExpenseDtoCategoryEnum];

/**
 * 
 * @export
 * @interface UpdateTripDto
 */
export interface UpdateTripDto {
    /**
     * 
     * @type {Array<number>}
     * @memberof UpdateTripDto
     */
    'destinations'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof UpdateTripDto
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTripDto
     */
    'startDate'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateTripDto
     */
    'endDate'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'password': string;
    /**
     * 
     * @type {Array<Trip>}
     * @memberof User
     */
    'trips': Array<Trip>;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deletedAt': string;
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerUploadFile: async (image?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/test`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetHello(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetHello(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerGetHello']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerUploadFile(image?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerUploadFile(image, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AppApi.appControllerUploadFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AppApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetHello(options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.appControllerGetHello(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {File} [image] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerUploadFile(image?: File, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.appControllerUploadFile(image, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerGetHello(options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerGetHello(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {File} [image] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AppApi
     */
    public appControllerUploadFile(image?: File, options?: RawAxiosRequestConfig) {
        return AppApiFp(this.configuration).appControllerUploadFile(image, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {SignInDto} signInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin: async (signInDto: SignInDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signInDto' is not null or undefined
            assertParamExists('authControllerLogin', 'signInDto', signInDto)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signInDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerProfile: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('authControllerRegister', 'createUserDto', createUserDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {SignInDto} signInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerLogin(signInDto: SignInDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerLogin(signInDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerLogin']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerProfile(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerProfile(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerProfile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authControllerRegister(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authControllerRegister']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {SignInDto} signInDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerLogin(signInDto: SignInDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerLogin(signInDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerProfile(options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.authControllerProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.authControllerRegister(createUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {SignInDto} signInDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerLogin(signInDto: SignInDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerLogin(signInDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerProfile(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authControllerRegister(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authControllerRegister(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DestinationsApi - axios parameter creator
 * @export
 */
export const DestinationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} name 
         * @param {string} country 
         * @param {File} [media] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerCreate: async (name: string, country: string, media?: File, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('destinationsControllerCreate', 'name', name)
            // verify required parameter 'country' is not null or undefined
            assertParamExists('destinationsControllerCreate', 'country', country)
            const localVarPath = `/destinations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (media !== undefined) { 
                localVarFormParams.append('media', media as any);
            }
    
            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (country !== undefined) { 
                localVarFormParams.append('country', country as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {DestinationsControllerFindAllOrderByEnum} [orderBy] 
         * @param {string} [name] 
         * @param {string} [country] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {DestinationsControllerFindAllOrderEnum} [order] 
         * @param {Array<string>} [relations] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerFindAll: async (orderBy?: DestinationsControllerFindAllOrderByEnum, name?: string, country?: string, page?: number, limit?: number, order?: DestinationsControllerFindAllOrderEnum, relations?: Array<string>, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/destinations`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (country !== undefined) {
                localVarQueryParameter['country'] = country;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (relations) {
                localVarQueryParameter['relations'] = relations;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DestinationsApi - functional programming interface
 * @export
 */
export const DestinationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DestinationsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {string} country 
         * @param {File} [media] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destinationsControllerCreate(name: string, country: string, media?: File, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Destination>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destinationsControllerCreate(name, country, media, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DestinationsApi.destinationsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {DestinationsControllerFindAllOrderByEnum} [orderBy] 
         * @param {string} [name] 
         * @param {string} [country] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {DestinationsControllerFindAllOrderEnum} [order] 
         * @param {Array<string>} [relations] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async destinationsControllerFindAll(orderBy?: DestinationsControllerFindAllOrderByEnum, name?: string, country?: string, page?: number, limit?: number, order?: DestinationsControllerFindAllOrderEnum, relations?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Destination>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.destinationsControllerFindAll(orderBy, name, country, page, limit, order, relations, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DestinationsApi.destinationsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DestinationsApi - factory interface
 * @export
 */
export const DestinationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DestinationsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} name 
         * @param {string} country 
         * @param {File} [media] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerCreate(name: string, country: string, media?: File, options?: RawAxiosRequestConfig): AxiosPromise<Destination> {
            return localVarFp.destinationsControllerCreate(name, country, media, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {DestinationsControllerFindAllOrderByEnum} [orderBy] 
         * @param {string} [name] 
         * @param {string} [country] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {DestinationsControllerFindAllOrderEnum} [order] 
         * @param {Array<string>} [relations] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destinationsControllerFindAll(orderBy?: DestinationsControllerFindAllOrderByEnum, name?: string, country?: string, page?: number, limit?: number, order?: DestinationsControllerFindAllOrderEnum, relations?: Array<string>, options?: RawAxiosRequestConfig): AxiosPromise<Array<Destination>> {
            return localVarFp.destinationsControllerFindAll(orderBy, name, country, page, limit, order, relations, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DestinationsApi - object-oriented interface
 * @export
 * @class DestinationsApi
 * @extends {BaseAPI}
 */
export class DestinationsApi extends BaseAPI {
    /**
     * 
     * @param {string} name 
     * @param {string} country 
     * @param {File} [media] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DestinationsApi
     */
    public destinationsControllerCreate(name: string, country: string, media?: File, options?: RawAxiosRequestConfig) {
        return DestinationsApiFp(this.configuration).destinationsControllerCreate(name, country, media, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {DestinationsControllerFindAllOrderByEnum} [orderBy] 
     * @param {string} [name] 
     * @param {string} [country] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {DestinationsControllerFindAllOrderEnum} [order] 
     * @param {Array<string>} [relations] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DestinationsApi
     */
    public destinationsControllerFindAll(orderBy?: DestinationsControllerFindAllOrderByEnum, name?: string, country?: string, page?: number, limit?: number, order?: DestinationsControllerFindAllOrderEnum, relations?: Array<string>, options?: RawAxiosRequestConfig) {
        return DestinationsApiFp(this.configuration).destinationsControllerFindAll(orderBy, name, country, page, limit, order, relations, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const DestinationsControllerFindAllOrderByEnum = {
    Name: 'name',
    Country: 'country',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt'
} as const;
export type DestinationsControllerFindAllOrderByEnum = typeof DestinationsControllerFindAllOrderByEnum[keyof typeof DestinationsControllerFindAllOrderByEnum];
/**
 * @export
 */
export const DestinationsControllerFindAllOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type DestinationsControllerFindAllOrderEnum = typeof DestinationsControllerFindAllOrderEnum[keyof typeof DestinationsControllerFindAllOrderEnum];


/**
 * TripsApi - axios parameter creator
 * @export
 */
export const TripsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {CreateExpenseDto} createExpenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerAddExpenseToTrip: async (id: number, createExpenseDto: CreateExpenseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tripsControllerAddExpenseToTrip', 'id', id)
            // verify required parameter 'createExpenseDto' is not null or undefined
            assertParamExists('tripsControllerAddExpenseToTrip', 'createExpenseDto', createExpenseDto)
            const localVarPath = `/trips/{id}/expenses`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createExpenseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateTripDto} createTripDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerCreate: async (createTripDto: CreateTripDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createTripDto' is not null or undefined
            assertParamExists('tripsControllerCreate', 'createTripDto', createTripDto)
            const localVarPath = `/trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createTripDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} expenseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerDeleteExpense: async (id: number, expenseId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tripsControllerDeleteExpense', 'id', id)
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('tripsControllerDeleteExpense', 'expenseId', expenseId)
            const localVarPath = `/trips/{id}/expenses/{expenseId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"expenseId"}}`, encodeURIComponent(String(expenseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {TripsControllerFindAllOrderByEnum} [orderBy] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {TripsControllerFindAllOrderEnum} [order] 
         * @param {Array<string>} [relations] 
         * @param {string} [title] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerFindAll: async (orderBy?: TripsControllerFindAllOrderByEnum, page?: number, limit?: number, order?: TripsControllerFindAllOrderEnum, relations?: Array<string>, title?: string, startDate?: string, endDate?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (relations) {
                localVarQueryParameter['relations'] = relations;
            }

            if (title !== undefined) {
                localVarQueryParameter['title'] = title;
            }

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString() :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString() :
                    endDate;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tripsControllerFindOne', 'id', id)
            const localVarPath = `/trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tripsControllerRemove', 'id', id)
            const localVarPath = `/trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTripDto} updateTripDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerUpdate: async (id: string, updateTripDto: UpdateTripDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tripsControllerUpdate', 'id', id)
            // verify required parameter 'updateTripDto' is not null or undefined
            assertParamExists('tripsControllerUpdate', 'updateTripDto', updateTripDto)
            const localVarPath = `/trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateTripDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} expenseId 
         * @param {UpdateExpenseDto} updateExpenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerUpdateExpense: async (id: number, expenseId: number, updateExpenseDto: UpdateExpenseDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tripsControllerUpdateExpense', 'id', id)
            // verify required parameter 'expenseId' is not null or undefined
            assertParamExists('tripsControllerUpdateExpense', 'expenseId', expenseId)
            // verify required parameter 'updateExpenseDto' is not null or undefined
            assertParamExists('tripsControllerUpdateExpense', 'updateExpenseDto', updateExpenseDto)
            const localVarPath = `/trips/{id}/expenses/{expenseId}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"expenseId"}}`, encodeURIComponent(String(expenseId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateExpenseDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TripsApi - functional programming interface
 * @export
 */
export const TripsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TripsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {CreateExpenseDto} createExpenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tripsControllerAddExpenseToTrip(id: number, createExpenseDto: CreateExpenseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Expense>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tripsControllerAddExpenseToTrip(id, createExpenseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.tripsControllerAddExpenseToTrip']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CreateTripDto} createTripDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tripsControllerCreate(createTripDto: CreateTripDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tripsControllerCreate(createTripDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.tripsControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} expenseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tripsControllerDeleteExpense(id: number, expenseId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tripsControllerDeleteExpense(id, expenseId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.tripsControllerDeleteExpense']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {TripsControllerFindAllOrderByEnum} [orderBy] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {TripsControllerFindAllOrderEnum} [order] 
         * @param {Array<string>} [relations] 
         * @param {string} [title] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tripsControllerFindAll(orderBy?: TripsControllerFindAllOrderByEnum, page?: number, limit?: number, order?: TripsControllerFindAllOrderEnum, relations?: Array<string>, title?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trip>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tripsControllerFindAll(orderBy, page, limit, order, relations, title, startDate, endDate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.tripsControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tripsControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tripsControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.tripsControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tripsControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tripsControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.tripsControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTripDto} updateTripDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tripsControllerUpdate(id: string, updateTripDto: UpdateTripDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Trip>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tripsControllerUpdate(id, updateTripDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.tripsControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {number} expenseId 
         * @param {UpdateExpenseDto} updateExpenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tripsControllerUpdateExpense(id: number, expenseId: number, updateExpenseDto: UpdateExpenseDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tripsControllerUpdateExpense(id, expenseId, updateExpenseDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.tripsControllerUpdateExpense']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TripsApi - factory interface
 * @export
 */
export const TripsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TripsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {CreateExpenseDto} createExpenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerAddExpenseToTrip(id: number, createExpenseDto: CreateExpenseDto, options?: RawAxiosRequestConfig): AxiosPromise<Expense> {
            return localVarFp.tripsControllerAddExpenseToTrip(id, createExpenseDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CreateTripDto} createTripDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerCreate(createTripDto: CreateTripDto, options?: RawAxiosRequestConfig): AxiosPromise<Trip> {
            return localVarFp.tripsControllerCreate(createTripDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} expenseId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerDeleteExpense(id: number, expenseId: number, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tripsControllerDeleteExpense(id, expenseId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TripsControllerFindAllOrderByEnum} [orderBy] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {TripsControllerFindAllOrderEnum} [order] 
         * @param {Array<string>} [relations] 
         * @param {string} [title] 
         * @param {string} [startDate] 
         * @param {string} [endDate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerFindAll(orderBy?: TripsControllerFindAllOrderByEnum, page?: number, limit?: number, order?: TripsControllerFindAllOrderEnum, relations?: Array<string>, title?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<Trip>> {
            return localVarFp.tripsControllerFindAll(orderBy, page, limit, order, relations, title, startDate, endDate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<Trip> {
            return localVarFp.tripsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tripsControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateTripDto} updateTripDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerUpdate(id: string, updateTripDto: UpdateTripDto, options?: RawAxiosRequestConfig): AxiosPromise<Trip> {
            return localVarFp.tripsControllerUpdate(id, updateTripDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} expenseId 
         * @param {UpdateExpenseDto} updateExpenseDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tripsControllerUpdateExpense(id: number, expenseId: number, updateExpenseDto: UpdateExpenseDto, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.tripsControllerUpdateExpense(id, expenseId, updateExpenseDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TripsApi - object-oriented interface
 * @export
 * @class TripsApi
 * @extends {BaseAPI}
 */
export class TripsApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {CreateExpenseDto} createExpenseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public tripsControllerAddExpenseToTrip(id: number, createExpenseDto: CreateExpenseDto, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).tripsControllerAddExpenseToTrip(id, createExpenseDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CreateTripDto} createTripDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public tripsControllerCreate(createTripDto: CreateTripDto, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).tripsControllerCreate(createTripDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} expenseId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public tripsControllerDeleteExpense(id: number, expenseId: number, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).tripsControllerDeleteExpense(id, expenseId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TripsControllerFindAllOrderByEnum} [orderBy] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {TripsControllerFindAllOrderEnum} [order] 
     * @param {Array<string>} [relations] 
     * @param {string} [title] 
     * @param {string} [startDate] 
     * @param {string} [endDate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public tripsControllerFindAll(orderBy?: TripsControllerFindAllOrderByEnum, page?: number, limit?: number, order?: TripsControllerFindAllOrderEnum, relations?: Array<string>, title?: string, startDate?: string, endDate?: string, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).tripsControllerFindAll(orderBy, page, limit, order, relations, title, startDate, endDate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public tripsControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).tripsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public tripsControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).tripsControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateTripDto} updateTripDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public tripsControllerUpdate(id: string, updateTripDto: UpdateTripDto, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).tripsControllerUpdate(id, updateTripDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} expenseId 
     * @param {UpdateExpenseDto} updateExpenseDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public tripsControllerUpdateExpense(id: number, expenseId: number, updateExpenseDto: UpdateExpenseDto, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).tripsControllerUpdateExpense(id, expenseId, updateExpenseDto, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const TripsControllerFindAllOrderByEnum = {
    Title: 'title',
    StartDate: 'startDate',
    EndDate: 'endDate',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt'
} as const;
export type TripsControllerFindAllOrderByEnum = typeof TripsControllerFindAllOrderByEnum[keyof typeof TripsControllerFindAllOrderByEnum];
/**
 * @export
 */
export const TripsControllerFindAllOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type TripsControllerFindAllOrderEnum = typeof TripsControllerFindAllOrderEnum[keyof typeof TripsControllerFindAllOrderEnum];


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('usersControllerCreate', 'createUserDto', createUserDto)
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UsersControllerFindAllOrderByEnum} [orderBy] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {UsersControllerFindAllOrderEnum} [order] 
         * @param {Array<string>} [relations] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll: async (orderBy?: UsersControllerFindAllOrderByEnum, page?: number, limit?: number, order?: UsersControllerFindAllOrderEnum, relations?: Array<string>, email?: string, firstName?: string, lastName?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (orderBy !== undefined) {
                localVarQueryParameter['orderBy'] = orderBy;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (order !== undefined) {
                localVarQueryParameter['order'] = order;
            }

            if (relations) {
                localVarQueryParameter['relations'] = relations;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (firstName !== undefined) {
                localVarQueryParameter['firstName'] = firstName;
            }

            if (lastName !== undefined) {
                localVarQueryParameter['lastName'] = lastName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerFindOne', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerRemove', 'id', id)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate: async (id: string, body: object, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('usersControllerUpdate', 'id', id)
            // verify required parameter 'body' is not null or undefined
            assertParamExists('usersControllerUpdate', 'body', body)
            const localVarPath = `/users/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerCreate(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {UsersControllerFindAllOrderByEnum} [orderBy] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {UsersControllerFindAllOrderEnum} [order] 
         * @param {Array<string>} [relations] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindAll(orderBy?: UsersControllerFindAllOrderByEnum, page?: number, limit?: number, order?: UsersControllerFindAllOrderEnum, relations?: Array<string>, email?: string, firstName?: string, lastName?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindAll(orderBy, page, limit, order, relations, email, firstName, lastName, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.usersControllerUpdate(id, body, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.usersControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UsersControllerFindAllOrderByEnum} [orderBy] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {UsersControllerFindAllOrderEnum} [order] 
         * @param {Array<string>} [relations] 
         * @param {string} [email] 
         * @param {string} [firstName] 
         * @param {string} [lastName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindAll(orderBy?: UsersControllerFindAllOrderByEnum, page?: number, limit?: number, order?: UsersControllerFindAllOrderEnum, relations?: Array<string>, email?: string, firstName?: string, lastName?: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<User>> {
            return localVarFp.usersControllerFindAll(orderBy, page, limit, order, relations, email, firstName, lastName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerFindOne(id: string, options?: RawAxiosRequestConfig): AxiosPromise<User> {
            return localVarFp.usersControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerRemove(id: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerRemove(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.usersControllerUpdate(id, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UsersControllerFindAllOrderByEnum} [orderBy] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {UsersControllerFindAllOrderEnum} [order] 
     * @param {Array<string>} [relations] 
     * @param {string} [email] 
     * @param {string} [firstName] 
     * @param {string} [lastName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFindAll(orderBy?: UsersControllerFindAllOrderByEnum, page?: number, limit?: number, order?: UsersControllerFindAllOrderEnum, relations?: Array<string>, email?: string, firstName?: string, lastName?: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerFindAll(orderBy, page, limit, order, relations, email, firstName, lastName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public usersControllerUpdate(id: string, body: object, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).usersControllerUpdate(id, body, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const UsersControllerFindAllOrderByEnum = {
    Email: 'email',
    CreatedAt: 'createdAt',
    UpdatedAt: 'updatedAt'
} as const;
export type UsersControllerFindAllOrderByEnum = typeof UsersControllerFindAllOrderByEnum[keyof typeof UsersControllerFindAllOrderByEnum];
/**
 * @export
 */
export const UsersControllerFindAllOrderEnum = {
    Asc: 'ASC',
    Desc: 'DESC'
} as const;
export type UsersControllerFindAllOrderEnum = typeof UsersControllerFindAllOrderEnum[keyof typeof UsersControllerFindAllOrderEnum];


